# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Even when given -y, apt will still sometimes hang at a prompt if a package
  # has clarifications to ask; DEBIAN_FRONTEND=noninteractive prevents that,
  # This will be defined for non-debian platforms below too, but there's no harm in that.
  # (TravisCI quietly defined this on all their platforms, but we have to give it manually on GithubCI.)
  DEBIAN_FRONTEND: 'noninteractive'
  HDF5_USE_FILE_LOCKING: 'FALSE'
  # Skip to the headless matplotlib renderer, which is less
  # bug-prone in the constrained environment of CI
  # Tip from a matplotlib dev: https://github.com/spinalcordtoolbox/spinalcordtoolbox/issues/3388#issuecomment-846091012
  # Ref: https://matplotlib.org/stable/users/explain/backends.html
  MPLBACKEND: 'Agg'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: build an environment for onnx
    # Defining matrix for OS and Python
    strategy:
      # Ensure exhaustive testing of all scenarios to gather maximum amount of information
      fail-fast: false
      matrix:
        os: [ "windows-latest", "ubuntu-20.04" ]
        python-version: [ '3.8', '3.9', '3.10' ]

    # Matrix driven OS
    runs-on: ${{ matrix.os }}

    # Main steps for the test to be reproduced across OS x Python
    steps:
      # Step 0: Checkout code.
      - uses: actions/checkout@v3

      # Step 1: Setup python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Step 2: Install dependencies
      - name: Install requirements.txt
        run: |
          pip install -r requirements.txt

      # Step 3: List installed packages
      - name: List installed packages
        run: |
          pip list

      # Step 4: Import ONNX
      - name: Import ONNX
        run: |
          python -c "from onnx.onnx_cpp2py_export import ONNX_ML"
